package principal;

import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.*;
import logica_sockets.Servidor;
import utileria.Ficha;

public class frmServidor extends javax.swing.JFrame implements Observer {

    private Servidor server;
    private Reglamento juego;
    private Color colores[];
    private boolean iniciado;
    private int numFichasJugador, puerto;

    public frmServidor() {
        initComponents();

        numFichasJugador = 4;
        iniciado = false;
        colores = new Color[4];
        colores[0] = Color.BLACK;
        colores[1] = Color.MAGENTA;
        colores[2] = Color.WHITE;
        colores[3] = Color.ORANGE;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbTablero = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnIniciar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblJugadores = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        spnDinero = new javax.swing.JSpinner();
        spnFichas = new javax.swing.JSpinner();
        spnPorcentaje = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuIniciar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Configuraciones del servidor");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Tipo de tablero:");

        cmbTablero.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        cmbTablero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0-Chico", "1-Mediano", "2-Grande", "3-Extra grande" }));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setText("Dinero por jugador:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Jugadores conectados");

        btnIniciar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        btnIniciar.setText("INICIAR JUEGO");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        tblJugadores.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        tblJugadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Jugador", "Numero", "Dinero"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblJugadores);
        if (tblJugadores.getColumnModel().getColumnCount() > 0) {
            tblJugadores.getColumnModel().getColumn(0).setResizable(false);
            tblJugadores.getColumnModel().getColumn(1).setResizable(false);
            tblJugadores.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel4.setText("Fichas por jugador:");

        spnDinero.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        spnDinero.setModel(new javax.swing.SpinnerNumberModel(0.0f, 0.0f, null, 1.0f));

        spnFichas.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        spnFichas.setModel(new javax.swing.SpinnerNumberModel(2, 2, 6, 1));

        spnPorcentaje.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        spnPorcentaje.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(5.0f), Float.valueOf(5.0f), Float.valueOf(30.0f), Float.valueOf(1.0f)));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel5.setText("% Que se paga por apuesta:");

        jMenu1.setText("Conexion");

        mnuIniciar.setText("Iniciar servidor");
        mnuIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIniciarActionPerformed(evt);
            }
        });
        jMenu1.add(mnuIniciar);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnIniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(spnDinero))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(50, 50, 50)
                        .addComponent(cmbTablero, 0, 208, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(19, 19, 19)
                        .addComponent(spnFichas))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(19, 19, 19)
                        .addComponent(spnPorcentaje)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spnDinero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(spnFichas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnPorcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbTablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnIniciar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        if (server == null) {
            JOptionPane.showMessageDialog(this, "Primero inicie el servidor", "Error!", 0);
            return;
        }

        String item = this.cmbTablero.getItemAt(this.cmbTablero.getSelectedIndex()).split("-")[0];
        int tipo = Integer.parseInt(item);
        juego = new Reglamento(tipo, 500, 600);

        //Agrega a todos los jugadores registrados en la tabla
        agregarJugadores();

        //Mensaje que valida que haya un minimo de 2 jugadores
        if (this.juego.getJugadores().size() < 2) {
            JOptionPane.showMessageDialog(this, "Se necesitan entre 2 a 4 jugadores para iniciar una partida",
                    "Error", 0);
            return;
        }

        //Obtiene el porcentaje que se paga en cada apuesta ( 5 - 30 %)
        float porcentaje = (float) this.spnPorcentaje.getValue();

        if (!(porcentaje >= 5 && porcentaje <= 30)) {
            JOptionPane.showMessageDialog(this, "El porcentaje que se apuesta debe ser minimo de 5% y máximo de 30%",
                    "Error", 0);
            return;
        }

        //Obtiene el dinero que se le asigna a cada jugador y lo envia a un fondo inicial
        juego.setFondoInicial((float) this.spnDinero.getValue(), porcentaje);

        //Se envia el juego al server
        server.setJuego(juego);
        server.asignarNumeroJugador(); //Se le asigna un número a cada jugador
        server.avisarInicio(); //Se avisa a todos los clientes que el juego ha iniciado
        server.actualizarInfoClientes(); //Se le envia a los clientes la info del juego
        iniciado = true;
        server.setIniciado(iniciado);//Se activa el juego en el server
        //Se desactivan las configuraciones
        this.btnIniciar.setEnabled(false);
        this.spnDinero.setEnabled(false);
        this.cmbTablero.setEnabled(false);
        this.spnFichas.setEnabled(false);
        this.spnPorcentaje.setEnabled(false);
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.dispose();
    }//GEN-LAST:event_formWindowClosed

    private void mnuIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIniciarActionPerformed
        String puertoStr = JOptionPane.showInputDialog(this, "Escriba el puerto");
        if (puertoStr.equals("")) {
            JOptionPane.showMessageDialog(this, "No ingrese datos vacios", "Error!", 0);
            return;
        }
        try {
            puerto = Integer.parseInt(puertoStr);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Ingrese un puerto valido, (numero)", "Error!", 0);
            return;
        }
        try {
            server = new Servidor(puerto);
            server.agregarObservador(this);
            Thread hilo = new Thread(server);
            hilo.start();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Puerto invalido, error al iniciar sv", "Error!", 0);
            return;
        }
    }//GEN-LAST:event_mnuIniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmServidor().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciar;
    private javax.swing.JComboBox<String> cmbTablero;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem mnuIniciar;
    private javax.swing.JSpinner spnDinero;
    private javax.swing.JSpinner spnFichas;
    private javax.swing.JSpinner spnPorcentaje;
    private javax.swing.JTable tblJugadores;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar(Observable o, Object arg) {
        DefaultTableModel model = (DefaultTableModel) this.tblJugadores.getModel();

        model.addRow(new Object[]{arg, model.getRowCount(), this.spnDinero.getValue()});
        this.tblJugadores.setModel(model);

    }

    /**
     * Agrega todos los jugadores registrados en la tabla al juego
     */
    private void agregarJugadores() {
        for (int j = 0; j < juego.getJugadores().size(); j++) {
            juego.getJugadores().remove(j);
        }

        //Obtiene el dinero que se le asigna a cada jugador
        float dinero = (float) this.spnDinero.getValue();
        //Obtiene el número de fichas que se le asigna a cada jugador
        numFichasJugador = (int) this.spnFichas.getValue();

        //Crear a todos los jugadores registrados
        for (int i = 0; i < this.tblJugadores.getModel().getRowCount(); i++) {
            String nombre = (String) this.tblJugadores.getValueAt(i, 0);

            ArrayList<Ficha> fichas = new ArrayList<>();
            //Se crean las fichas con colores predeterminados para cada jugador
            for (int j = 0; j < numFichasJugador; j++) {
                fichas.add(new Ficha(colores[i], -2, j));
            }
            //Crear un nuevo jugador con esa info y lo añade al juego
            Jugador jugador = new Jugador(dinero, nombre, i + 1, fichas);
            juego.agregarJugador(jugador);
        }
    }

}
